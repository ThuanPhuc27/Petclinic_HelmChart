{{- if .Values.configMap.apiGateway.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap.name }}
  namespace: {{ .Release.Namespace }}
data:
  application.properties: |
    spring.application.name=api-gateway
    spring.config.import=optional:configserver:${CONFIG_SERVER_URL:http://petclinic-config-server-service:8888/}
    
    spring.cloud.gateway.default-filters[0].name=CircuitBreaker
    spring.cloud.gateway.default-filters[0].args.name=defaultCircuitBreaker
    spring.cloud.gateway.default-filters[0].args.fallbackUri=forward:/fallback
    
    spring.cloud.gateway.default-filters[1].name=Retry
    spring.cloud.gateway.default-filters[1].args.retries=1
    spring.cloud.gateway.default-filters[1].args.statuses=SERVICE_UNAVAILABLE
    spring.cloud.gateway.default-filters[1].args.methods=POST
    
    spring.cloud.gateway.routes[0].id=vets-service
    spring.cloud.gateway.routes[0].uri=http://petclinic-vets-service-service:8083
    spring.cloud.gateway.routes[0].predicates[0]=Path=/api/vet/**
    spring.cloud.gateway.routes[0].filters[0]=StripPrefix=2
    
    spring.cloud.gateway.routes[1].id=visits-service
    spring.cloud.gateway.routes[1].uri=http://petclinic-visits-service-service:8082
    spring.cloud.gateway.routes[1].predicates[0]=Path=/api/visit/**
    spring.cloud.gateway.routes[1].filters[0]=StripPrefix=2
    
    spring.cloud.gateway.routes[2].id=customers-service
    spring.cloud.gateway.routes[2].uri=http://petclinic-customers-service-service:8081
    spring.cloud.gateway.routes[2].predicates[0]=Path=/api/customer/**
    spring.cloud.gateway.routes[2].filters[0]=StripPrefix=2
    
    spring.cloud.gateway.routes[3].id=genai-service
    spring.cloud.gateway.routes[3].uri=http://petclinic-genai-service-service:8084
    spring.cloud.gateway.routes[3].predicates[0]=Path=/api/genai/**
    spring.cloud.gateway.routes[3].filters[0]=StripPrefix=2
    spring.cloud.gateway.routes[3].filters[1]=CircuitBreaker=name=genaiCircuitBreaker,fallbackUri=/fallback

    management.endpoints.web.exposure.include="*"
    management.endpoint.health.show-details=always
    management.tracing.enabled=true
    management.tracing.sampling.probability=1.0
    management.zipkin.tracing.enabled=true
    management.zipkin.tracing.endpoint=http://tracing-server-service.default.svc.cluster.local:9411/api/v2/spans
    management.metrics.distribution.percentiles-histogram.http.server.requests=true
    management.metrics.enable.exemplars=true
    logging.pattern.console=%clr(%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}){faint} %clr(%5p) level="%p" time="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}" service="${spring.application.name}" traceId="%X{traceId:-}" spanId="%X{spanId:-}" thread="%t" logger="%logger{39}" message="%m"%n
    logging.pattern.file=%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} level="%p" time="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}" service="${spring.application.name}" traceId="%X{traceId:-}" spanId="%X{spanId:-}" thread="%t" logger="%logger{39}" message="%m"%n
    
    # Logging levels
    logging.level.io.micrometer.tracing=${LOGGING_LEVEL_IO_MICROMETER_TRACING:DEBUG}
    logging.level.org.springframework.cloud.sleuth=DEBUG
    logging.level.org.springframework.cloud.sleuth.autoconfig=DEBUG
    logging.level.org.springframework.web=DEBUG
    
    # Charset
    logging.charset.console=UTF-8
    logging.charset.file=UTF-8
{{- end }}
